

# CREATE ACCOUNT USE CASE (joshua)

    class NewUserForm():
        __init__(login_reference):
            # MOST UI CODE IS AUTO-GENERATED
            # Member variables
            self.login = login_reference
            self.incoming_user = None
            self.username = lineEdit_username.text()
            self/password = lineEdit_password.text()
            self.email = lineEdit_email.text()
            # Connect signals with functions
            button_create.clicked.connect(create_account(username, password))

    def create_account():
        users = load_users(Users.xml)
        customers = users.customers

        # check if user already exists by using email and username
        for customer in customers:
            if (self.username == customer.username or 
                self.email == customer.email)
                print("user already exists")
        
        self.incoming_user = Customer(username, password, email, other_attributes)
        # add new customer to customers list
        customers.add(incoming_user)
        # serialize customers list into xml
        serialize_customers()
        # hide new user form
        self.ui.hide()
        # show login form
        self.login_reference.show()




# PRODUCT RECOMMENDATIONS USE CASE

    def update_recommendations():
        # get checked items from a listview containing all items currently in stock
        checked_items = inventory.checkedItems()
        
        i = 0
        for checked_item in checked_items:
            recommendations[i] = checked_item
        

        

# LOGIN USE CASE (Sakil)






# ADD PRODUCT USE CASE 

    def add_product(items, vendor):
        inventory = read(Inventory.xml)
        inventory.add(items)
        write(inventory)


# BUY PRODUCT USE CASE (nana)

# DISCUSSION FORUM USE CASE

# DELIVERY SYSTEM USE CASE


